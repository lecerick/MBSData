{"version":3,"sources":["reducers/settingsReducer.js","reducers/index.js","store/configureStore.js","components/ScrollToTop/index.js","components/App.js","components/Root.js","serviceWorker.js","index.js","components/Loading/index.js","constants/appConfig.js","components/Loading/Loader.js","constants/actionTypes.js"],"names":["initialSettings","APPCONFIG","settings","state","arguments","length","undefined","action","type","types","Object","objectSpread","layout","layoutOption","boxedLayout","isBoxedLayout","fixedSidenav","isFixedSidenav","fixedHeader","isFixedHeader","collapsedNav","isCollapsedNav","offCanvasNav","isOffCanvasNav","sidenavWidth","offCanvasMobileNav","isOffCanvasMobileNav","colorOption","rootReducer","combineReducers","settingsReducer","routing","routerReducer","history","createHistory","configureStore","initialState","reactRouterMiddleware","routerMiddleware","middlewares","thunk","createStore","compose","applyMiddleware","apply","ScrollToTop","prevProps","this","props","location","window","scrollTo","children","React","Component","withRouter","AsyncAppLayout","loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","LoadingComponent","AsyncException","AsyncAccount","App","_this$props","match","pathname","react_default","a","createElement","Redirect","to","id","Route","path","concat","url","component","Root","store","react_redux_es","react_router_redux_es","components_ScrollToTop","Boolean","hostname","render","Root_Root","document","getElementById","navigator","serviceWorker","ready","registration","unregister","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Loader__WEBPACK_IMPORTED_MODULE_1__","Loading","error","className","pastDelay","brand","year","Date","getFullYear","AutoCloseMobileNav","customizer","showCustomizer","color","primary","success","info","infoAlt","warning","danger","text","gray","theme","antd__WEBPACK_IMPORTED_MODULE_1__","Loader","size","d","__webpack_exports__","CHANGE_LAYOUT","TOGGLE_BOXED_LAYOUT","TOGGLE_COLLAPSED_NAV","TOGGLE_OFFCANVAS_NAV","TOGGLE_FIXED_SIDENAV","TOGGLE_FIXED_HEADER","CHANGE_SIDENAV_WIDTH","TOGGLE_OFFCANVAS_MOBILE_NAV","CHANGE_COLOR_OPTION","CHANGE_THEME"],"mappings":"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","file":"static/js/main.91a1a0ad.chunk.js","sourcesContent":["import APPCONFIG from 'constants/appConfig';\nimport * as types from '../constants/actionTypes';\n\nconst initialSettings = APPCONFIG.settings;\n\nconst settings = (state = initialSettings, action) => {\n  switch (action.type) {\n    case types.CHANGE_LAYOUT:\n      return {\n        ...state,\n        layout: action.layoutOption\n      };\n    case types.TOGGLE_BOXED_LAYOUT:\n      return {\n        ...state,\n        boxedLayout: action.isBoxedLayout\n      };\n    case types.TOGGLE_FIXED_SIDENAV:\n      return {\n        ...state,\n        fixedSidenav: action.isFixedSidenav\n      };\n    case types.TOGGLE_FIXED_HEADER:\n      return {\n        ...state,\n        fixedHeader: action.isFixedHeader\n      };\n    case types.TOGGLE_COLLAPSED_NAV:\n      return {\n        ...state,\n        collapsedNav: action.isCollapsedNav\n      };\n    case types.TOGGLE_OFFCANVAS_NAV:\n      return {\n        ...state,\n        offCanvasNav: action.isOffCanvasNav\n      };\n    case types.CHANGE_SIDENAV_WIDTH:\n      return {\n        ...state,\n        sidenavWidth: action.sidenavWidth\n      };\n    case types.TOGGLE_OFFCANVAS_MOBILE_NAV:\n      return {\n        ...state,\n        offCanvasMobileNav: action.isOffCanvasMobileNav\n      };\n    case types.CHANGE_COLOR_OPTION:\n      return {\n        ...state,\n        colorOption: action.colorOption\n      };\n    default:\n      return state;\n  }\n}\n\nexport default settings;\n","import { combineReducers } from 'redux';\nimport settingsReducer from './settingsReducer';\nimport { routerReducer } from 'react-router-redux';\n\nconst rootReducer = combineReducers({\n  settings: settingsReducer,\n  routing: routerReducer\n});\n\nexport default rootReducer;\n","import {createStore, compose, applyMiddleware} from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunk from 'redux-thunk';\nimport createHistory from 'history/createHashHistory';\n// 'routerMiddleware': the new way of storing route changes with redux middleware since rrV4.\nimport { routerMiddleware } from 'react-router-redux';\nimport rootReducer from '../reducers';\nexport const history = createHistory();\nfunction configureStoreProd(initialState) {\n  const reactRouterMiddleware = routerMiddleware(history);\n  const middlewares = [\n    // Add other middleware on this line...\n\n    // thunk middleware can also accept an extra argument to be passed to each thunk action\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n    thunk,\n    reactRouterMiddleware,\n  ];\n\n  return createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middlewares)\n    )\n  );\n}\n\nfunction configureStoreDev(initialState) {\n  const reactRouterMiddleware = routerMiddleware(history);\n  const middlewares = [\n    // Add other middleware on this line...\n\n    // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.\n    reduxImmutableStateInvariant(),\n\n    // thunk middleware can also accept an extra argument to be passed to each thunk action\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n    thunk,\n    reactRouterMiddleware,\n  ];\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\n  const store = createStore(rootReducer, initialState, composeEnhancers(\n    applyMiddleware(...middlewares)\n    )\n  );\n\n  return store;\n}\n\nconst configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\n\nexport default configureStore;\n","import React from 'react';\nimport { withRouter } from 'react-router';\n\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0)\n    }\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport loadable from 'react-loadable';\nimport LoadingComponent from 'components/Loading';\n\n// 3rd\nimport 'styles/antd.less';\nimport 'styles/bootstrap/bootstrap.scss'\n// custom\nimport \"styles/layout.scss\"\nimport \"styles/theme.scss\"\nimport \"styles/ui.scss\"\nimport \"styles/vendors.scss\"\n\n\nlet AsyncAppLayout = loadable({\n  loader: () => import('components/Layout/AppLayout/'),\n  loading: LoadingComponent\n})\nlet AsyncException = loadable({\n  loader: () => import('routes/exception/'),\n  loading: LoadingComponent\n})\nlet AsyncAccount = loadable({\n  loader: () => import('routes/user/'),\n  loading: LoadingComponent\n})\n\n\nclass App extends React.Component {\n  render() {\n    const { match, location } = this.props;\n    const isRoot = location.pathname === '/' ? true : false;\n    if (isRoot) {\n      // return ( <Redirect to={'/app/ui-overview'}/> );\n      return ( <Redirect to={'/app/home'}/> );\n\n    }\n\n    return (\n      <div id=\"app\">\n        <Route path={`${match.url}app`} component={AsyncAppLayout} />\n        <Route path={`${match.url}exception`} component={AsyncException} />\n        <Route path={`${match.url}user`} component={AsyncAccount} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ConnectedRouter } from 'react-router-redux';\nimport { Provider } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport ScrollToTop from 'components/ScrollToTop';\nimport App from './App';\n\nexport default class Root extends Component {\n  render() {\n    const { store, history } = this.props;\n    return (\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <ScrollToTop>\n            <Route path=\"/\" component={App} />\n          </ScrollToTop>\n        </ConnectedRouter>\n      </Provider>\n    );\n  }\n}\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport configureStore, { history } from './store/configureStore';\nimport Root from './components/Root';\nimport * as serviceWorker from './serviceWorker';\nconst store = configureStore();\n\nrender(\n  <Root store={store} history={history} />,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Loader from './Loader';\n\nfunction Loading(props) {\n  if (props.error) {\n    return <div className=\"loader-container\">Error! Please refresh the page</div>;\n  } else if (props.pastDelay) {\n    return <div className=\"loader-container\"> <Loader /> </div>;\n  } else {\n    return null; // Avoiding Flash Of Loading Component (<200ms)\n  }\n}\n\nexport default Loading;","let date = new Date();\nlet year = date.getFullYear();\n\nconst APPCONFIG = {\n  brand: 'Ant',\n  year: year,\n  AutoCloseMobileNav: true,           // Boolean: true, false. Automatically close sidenav on route change (Mobile only)\n  customizer: false,                   // Boolean: true, false. Customizer will be removed completely when set to false\n  showCustomizer: false,              // Boolean: true, false. Customizer will be opened (visible) first time app was loaded if set to true\n  color: {\n    primary:  '#1890ff',\n    success:  '#66BB6A',\n    info:     '#01BCD4',\n    infoAlt:  '#948aec',\n    warning:  '#ffc53d',\n    danger:   '#ff4d4f',\n    text:     '#3D4051',\n    gray:     '#EDF0F1'\n  },\n  settings: {\n    layout: '4',                      // String: 1, 2, 3, 4 and add your own\n    boxedLayout: true,               // Boolean: true, false\n    fixedSidenav: false,              // Boolean: true, false\n    fixedHeader: true,               // Boolean: true, false\n    collapsedNav: false,              // Boolean: true, false\n    offCanvasNav: false,              // Boolean: true, false\n    sidenavWidth: 240,                // Number\n    offCanvasMobileNav: true,         // Boolean: true, false. Mobile only, by default, it's true (off canvas)\n    colorOption: '11',                //34 String: 11,12,13,14,15,16; 21,22,23,24,25,26; 31,32,33,34,35,36\n    theme: 'light',                   // (WIP) String: light, gray, dark\n  }\n}\n\nexport default APPCONFIG;","import React from 'react';\nimport { Spin } from 'antd';\n\nconst Loader = () => (\n  <Spin size=\"large\" />\n)\n\nexport default Loader;\n","export const CHANGE_LAYOUT = 'CHANGE_LAYOUT';\nexport const TOGGLE_BOXED_LAYOUT = 'TOGGLE_BOXED_LAYOUT';\nexport const TOGGLE_COLLAPSED_NAV = 'TOGGLE_COLLAPSED_NAV';\nexport const TOGGLE_OFFCANVAS_NAV = 'TOGGLE_OFFCANVAS_NAV';\nexport const TOGGLE_FIXED_SIDENAV = 'TOGGLE_FIXED_SIDENAV';\nexport const TOGGLE_FIXED_HEADER = 'TOGGLE_FIXED_HEADER';\nexport const CHANGE_SIDENAV_WIDTH = 'CHANGE_SIDENAV_WIDTH';\nexport const TOGGLE_OFFCANVAS_MOBILE_NAV = 'TOGGLE_OFFCANVAS_MOBILE_NAV';\nexport const CHANGE_COLOR_OPTION = 'CHANGE_COLOR_OPTION';\nexport const CHANGE_THEME = 'CHANGE_THEME';\n"],"sourceRoot":""}